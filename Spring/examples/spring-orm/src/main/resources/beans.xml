<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

<!-- CONFIGURE CONTEXTUAL SESSIONS
Using the following three beans (DataSource => 
SessionFactory=> Tx Manager & DAOs) we are able to 
leverage spring for data persistence
We no longer need to handle transactions ourselves 
 -->
 
 <context:property-placeholder location="classpath:db.properties" />
 
 <bean id="myDataSource"
 	class="org.apache.commons.dbcp.BasicDataSource">
 	<property name="driverClassName" 
 		value="${driver}" />
 	<property name="url" value= "${url}"/>
	<property name="username" value="${username}"/>
	<property name="password" value="${pwd}"/>
 </bean>
 
 <bean id="mySessionFactory"
 	class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
 	<property name="dataSource" ref="myDataSource"/>
 	<property name="packagesToScan" value="com.revature" />
 	<property name="hibernateProperties">
 		<props>
 			<prop key="hibernate.dialect">
 				org.hibernate.dialect.Oracle10gDialect</prop>
 			<prop key="hibernate.hbm2ddl.auto">update</prop>
 			<prop key="hibernate.show_sql">true</prop>
 		</props>
 	</property>
 </bean>
 
 <bean id="transactionManager"
 class="org.springframework.orm.hibernate4.HibernateTransactionManager">
 	
 </bean>



<!-- enable application to be annotation driven -->
</beans>