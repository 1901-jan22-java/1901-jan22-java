-- 2.1 SELECT
SELECT * FROM employee;
SELECT * FROM employee WHERE lastname = 'King';
SELECT * FROM employee WHERE firstname = 'Andrew' AND reportsto IS NULL;

-- 2.2 ORDER BY
SELECT * FROM album ORDER BY title DESC;
SELECT firstname FROM customer;

-- 2.3 INSERT INTO
INSERT INTO genre (genreid,name) VALUES (26, 'Electrojazz');
INSERT INTO genre (genreid,name) VALUES (27, 'House');
INSERT INTO employee VALUES 
  (9, 'Smith', 'John', 'IT Staff', '6', '09-JAN-68', '04-MAR-04',	
  '923 7 ST NW',	'Lethbridge', 'AB',	'Canada',	'T1H 1Y8',
  '+1 (403) 467-3351',	'+1 (403) 467-8772', 'JSmith@chinookcorp.com');
INSERT INTO employee VALUES 
  (10, 'Smith', 'Jack', 'IT Staff', '9', '09-JAN-68', '04-MAR-04',	
  '923 7 ST NW',	'Lethbridge', 'AB',	'Canada',	'T1H 1Y8',
  '+1 (403) 467-3351',	'+1 (403) 467-8772', 'JackSmith@chinookcorp.com'); 
INSERT INTO Customer 
  (CustomerId, FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Email, SupportRepId) 
VALUES 
  (62, 'Joshua', 'Gray', '1033 N Park Ave', 'Tucson', 'AZ', 'USA', '85719', '+1 (520) 622-4200', 'Joshua.gray@aol.com', 4);
INSERT INTO Customer 
  (CustomerId, FirstName, LastName, Address, City, State, Country, PostalCode, Phone, Email, SupportRepId) 
VALUES 
  (63, 'Sarah', 'Gray', '1033 N Park Ave', 'Tucson', 'AZ', 'USA', '85719', '+1 (520) 622-4200', 'Sarah.gray@aol.com', 4);
  
-- 2.4 UPDATE
UPDATE customer
  SET firstname = 'Robert', lastname = 'Walter'
  WHERE firstname = 'Aaron' AND lastname = 'Mitchell';
UPDATE artist
  SET name = 'CCR'
  WHERE name = 'Creedence Clearwater Revival';
  
-- 2.5 LIKE
SELECT * FROM invoice WHERE billingaddress LIKE 'T%';

-- 2.6 BETWEEN
SELECT * FROM invoice WHERE total BETWEEN 15 AND 50;

SELECT * FROM employee WHERE hiredate BETWEEN TO_DATE('01-JUN-03','DD,MON,YY') AND TO_DATE('01-MAR-04','DD,MON,YY');

DEFINE  start = TO_DATE('01-JUN-03','DD,MON,YY');
DEFINE  end = TO_DATE('01-MAR-04','DD,MON,YY');
SELECT * FROM employee WHERE hiredate BETWEEN &start AND &end;

-- 2.7 DELETE
DELETE FROM invoiceline WHERE invoiceid IN (169,180,364,387,409,235,48);
DELETE FROM invoice WHERE customerid = 29;
DELETE FROM customer WHERE firstname = 'Robert';
SELECT * FROM customer WHERE firstname = 'Robert';

-- 3.1 SYSTEM DEFINED FUNCTIONS
SELECT CURRENT_DATE FROM DUAL;
-- SELECT LENGTH('CANDIDE') "Length in characters" FROM DUAL;
SELECT LENGTH(name) "Media Type Name Length(?)" FROM mediatype;

-- 3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
SELECT AVG(TOTAL) FROM INVOICE;
SELECT MAX(unitprice) FROM TRACK;

-- So I just realized I didn't need to do the fancy stuff below...
-- I'll keep it for future references
--CREATE OR REPLACE FUNCTION avgInvoiceTotal 
--RETURN NUMBER IS 
--   totalAvg NUMBER;
--BEGIN 
--   SELECT AVG(total) INTO totalAvg FROM invoice; 
--   RETURN totalAvg; 
--END; 
--/ 
--SELECT avgInvoiceTotal FROM dual;

-- 3.3 USER DEFINED FUNCTION
CREATE OR REPLACE FUNCTION avgInvoiceItemPrice
RETURN NUMBER IS
  avgIIP NUMBER;
BEGIN
  SELECT AVG(unitprice) INTO avgiip FROM invoiceline;
  RETURN avgIIP;
END;
/
SELECT avgInvoiceItemPrice FROM dual;

-- 3.4 USER DEFINED TABLE VALUE FUNCTION
SELECT * FROM EMPLOYEE WHERE TO_DATE(BIRTHDATE,'DD,MON,YY') >= TO_DATE('01-JAN-68','DD,MON,YY');

CREATE OR REPLACE FUNCTION AFTER_1968 
RETURN SYS_REFCURSOR IS
  EMPLOYEE_C SYS_REFCURSOR;
BEGIN
  OPEN EMPLOYEE_C FOR 
    SELECT * FROM EMPLOYEE 
    WHERE TO_DATE(BIRTHDATE,'DD,MON,YY') >= TO_DATE('01-JAN-68','DD,MON,YY');
  RETURN EMPLOYEE_C;
END;
/
SELECT AFTER_1968 FROM DUAL;

-- 4.1 STORED PROCEDURES
CREATE OR REPLACE PROCEDURE EMPLOYEE_INFO(
  JUSTIN_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN JUSTIN_CURSOR FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/

DECLARE
  EMPLOYEE_C SYS_REFCURSOR;
  FIRSTNAME VARCHAR2(100);
  LASTNAME VARCHAR2(100);
BEGIN
  EMPLOYEE_INFO(EMPLOYEE_C);
  LOOP
    FETCH EMPLOYEE_C INTO FIRSTNAME, LASTNAME;
    EXIT WHEN EMPLOYEE_C%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ', ' || LASTNAME);
  END LOOP;
END;
/

-- 4.2 STORED PROCEDURE INPUT PARAMETERS
CREATE OR REPLACE PROCEDURE UPDATE_BY_EMPLOYEEID(
  E_ID IN NUMBER,
  E_LN IN VARCHAR2,
  E_FN IN VARCHAR2,
  E_TLE IN VARCHAR2,
  E_REP IN NUMBER,
  E_BD IN DATE,
  E_HD IN DATE,
  E_ADD IN VARCHAR2,
  E_CTY IN VARCHAR2,
  E_STA IN VARCHAR2,
  E_CTR IN VARCHAR2,
  E_POS IN VARCHAR2,
  E_PHO IN VARCHAR2,
  E_FAX IN VARCHAR2,
  E_EML IN VARCHAR2
) IS 
BEGIN
  UPDATE EMPLOYEE 
  SET 
    LASTNAME = E_LN,
    FIRSTNAME = E_FN,
    TITLE = E_TLE,
    REPORTSTO = E_REP,
    BIRTHDATE = E_BD,
    HIREDATE = E_HD,
    ADDRESS = E_ADD,
    CITY = E_CTY,
    STATE = E_STA,
    COUNTRY = E_CTR,
    POSTALCODE = E_POS,
    PHONE = E_PHO,
    FAX = E_FAX,
    EMAIL = E_EML
  WHERE EMPLOYEEID = E_ID;
END;
/
DECLARE
  E_ID NUMBER := 1;
  E_LN VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_FN VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_TLE VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_REP NUMBER := 1;
  E_BD DATE := TO_DATE('01-JAN-68','DD,MON,YY');
  E_HD DATE := TO_DATE('01-JAN-68','DD,MON,YY');
  E_ADD VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_CTY VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_STA VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_CTR VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_POS VARCHAR2(100) := 'SHORT';
  E_PHO VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_FAX VARCHAR2(100) := 'SRSLYLONGSTRING';
  E_EML VARCHAR2(100) := 'SRSLYLONGSTRING';
BEGIN
  UPDATE_BY_EMPLOYEEID(E_ID, E_LN, E_FN, E_TLE, E_REP, E_BD, E_HD, E_ADD, E_CTY, E_STA, E_CTR, E_POS, E_PHO, E_FAX, E_EML);
END;

CREATE OR REPLACE PROCEDURE GET_MANAGERS(
  MANAGER_NAME OUT VARCHAR2
) IS
BEGIN
  SELECT (FIRSTNAME||' '||LASTNAME) INTO MANAGER_NAME
  FROM EMPLOYEE WHERE TITLE = 'Sales Manager';
END;
/
DECLARE
  MANAGER_NAME VARCHAR2(100);
BEGIN
  GET_MANAGERS(MANAGER_NAME);
  dbms_output.put_line(MANAGER_NAME);
END;
/

-- 4.3 STORED PROCEDURE OUTPUT PARAMETERS
CREATE OR REPLACE PROCEDURE GET_CUSTOMER_INFO_BY_CID(
  C_ID IN NUMBER,
  C_CURSOR OUT SYS_REFCURSOR
) IS
BEGIN
  OPEN C_CURSOR FOR 
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CUSTOMER
    WHERE CUSTOMERID = C_ID;
END;
/

DECLARE
  C_ID NUMBER := 10;
  C_CURSOR SYS_REFCURSOR;
  FIRSTNAME VARCHAR(100);
  LASTNAME VARCHAR(100);
  COMPANY VARCHAR(100);
BEGIN
  GET_CUSTOMER_INFO_BY_CID(C_ID, C_CURSOR);
  LOOP
    FETCH C_CURSOR INTO FIRSTNAME, LASTNAME, COMPANY;
    EXIT WHEN C_CURSOR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(FIRSTNAME || ' ' || LASTNAME || '@' || COMPANY);
  END LOOP;
END;
/

-- 5.0 TRANSACTIONS
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(
  I_ID IN NUMBER
) IS
BEGIN
  DELETE FROM INVOICELINE WHERE INVOICEID = I_ID;
  DELETE FROM INVOICE WHERE INVOICEID = I_ID;
END;
/
SELECT * FROM INVOICE WHERE INVOICEID = 1;
EXECUTE DELETE_INVOICE(1);

CREATE OR REPLACE PROCEDURE INSERT_NEW_CUST(
  CID IN NUMBER,
  FN IN VARCHAR2,
  LN IN VARCHAR2,
  CPY IN VARCHAR2,
  ADR IN VARCHAR2,
  CTY IN VARCHAR2,
  STA IN VARCHAR2,
  CTR IN VARCHAR2,
  POS IN VARCHAR2,
  PHN IN VARCHAR2,
  FAX IN VARCHAR2,
  EML IN VARCHAR2,
  SRID IN NUMBER
) IS
BEGIN
  INSERT INTO CUSTOMER VALUES(
    CID, FN, LN, CPY, ADR, CTY, STA, CTR, POS, PHN, FAX, EML,SRID
  );
END;
/
DECLARE 
  CID NUMBER := 66;
  FN VARCHAR(100) := 'SRSLYLONGSTRING';
  LN VARCHAR(100) := 'SRSLYLONGSTRING';
  CPY VARCHAR(100) := 'SRSLYLONGSTRING';
  ADR VARCHAR(100) := 'SRSLYLONGSTRING';
  CTY VARCHAR(100) := 'SRSLYLONGSTRING';
  STA VARCHAR(100) := 'SRSLYLONGSTRING';
  CTR VARCHAR(100) := 'SRSLYLONGSTRING';
  POS VARCHAR(100) := 'SHRT';
  PHN VARCHAR(100) := 'SRSLYLONGSTRING';
  FAX VARCHAR(100) := 'SRSLYLONGSTRING';
  EML VARCHAR(100) := 'SRSLYLONGSTRING';
  SRID NUMBER := 5;
BEGIN
  INSERT_NEW_CUST(CID,FN,LN,CPY,ADR,CTY,STA,CTR,POS,PHN,FAX,EML,SRID);
END;
/

-- 6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER EMPLOYEE_TRIGGER
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('YOU ACTIVATED MY TRAP CARD!');
END;
/
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
VALUES (63, 'Callahan', 'Laura', 'IT Staff', 6, TO_DATE('1968-1-9 00:00:00','yyyy-mm-dd hh24:mi:ss'), TO_DATE('2004-3-4 00:00:00','yyyy-mm-dd hh24:mi:ss'), '923 7 ST NW', 'Lethbridge', 'AB', 'Canada', 'T1H 1Y8', '+1 (403) 467-3351', '+1 (403) 467-8772', 'laura@chinookcorp.com');

CREATE OR REPLACE TRIGGER ALBUM_TRIGGER
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('ADMITTEDLY, THESE REFERENCES ARE PRETTY OBSCURE.');
END;
/
UPDATE ALBUM SET TITLE = 'BACH HARPISCHORD CONCERTO' WHERE ALBUMID = 276;

CREATE OR REPLACE TRIGGER CUSTOMER_TRIGGER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
  DBMS_OUTPUT.PUT_LINE('CUSTOMER...TERMINATED. THAT DOES SOUND OMINOUS.');
END;
/
DELETE FROM CUSTOMER WHERE CUSTOMERID=1;

-- 7.0 JOINS
SELECT CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM CUSTOMER INNER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM CUSTOMER FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT ARTIST.NAME, ALBUM.TITLE
FROM ALBUM RIGHT JOIN ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

SELECT ARTIST.NAME FROM ALBUM,ARTIST ORDER BY ARTIST.NAME ASC;

SELECT * 
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.REPORTSTO = E2.REPORTSTO;

SELECT * FROM ALBUM
JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID
JOIN TRACK ON ALBUM.ALBUMID = TRACK.ALBUMID
JOIN PLAYLISTTRACK ON TRACK.TRACKID = PLAYLISTTRACK.TRACKID
JOIN PLAYLIST ON PLAYLISTTRACK.PLAYLISTID = PLAYLIST.PLAYLISTID
JOIN INVOICELINE ON TRACK.TRACKID = INVOICELINE.TRACKID
JOIN INVOICE ON INVOICELINE.INVOICEID = INVOICE.INVOICEID
JOIN CUSTOMER ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID
JOIN EMPLOYEE ON EMPLOYEE.REPORTSTO = CUSTOMER.SUPPORTREPID
JOIN GENRE ON GENRE.GENREID = TRACK.GENREID
JOIN MEDIATYPE ON MEDIATYPE.MEDIATYPEID = TRACK.MEDIATYPEID
;