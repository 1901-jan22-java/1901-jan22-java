CREATE TABLE BANK_USER(
  U_ID NUMBER(10) PRIMARY KEY,
  FIRSTNAME VARCHAR2(50) NOT NULL,
  LASTNAME VARCHAR2(50) NOT NULL,
  USERNAME VARCHAR2(50) NOT NULL UNIQUE,
  PASSWORD VARCHAR2(50) NOT NULL
);
CREATE TABLE BANK_ACCOUNTS(
  A_ID NUMBER(10) PRIMARY KEY,
  USER_ID NUMBER(10) NOT NULL,
  BALANCE NUMBER (15, 2) NOT NULL, --15 NORMAL PLACEES 2 DECIMAL PLACES
  ACC_TYPE VARCHAR2(20) NOT NULL,
  FOREIGN KEY (USER_ID) REFERENCES BANK_USER(U_ID)
);
--CREATE SEQUENCES
CREATE SEQUENCE BU_SEQ;
CREATE SEQUENCE BA_SEQ
--TRIGGERS
CREATE OR REPLACE TRIGGER BU_AUTO
BEFORE INSERT ON BANK_USER
FOR EACH ROW
BEGIN
  SELECT BU_SEQ.NEXTVAL INTO :NEW.U_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER BA_AUTO
BEFORE INSERT ON BANK_ACCOUNTS
FOR EACH ROW
BEGIN
  SELECT BA_SEQ.NEXTVAL INTO :NEW.A_ID FROM DUAL;
END;
/
SELECT * FROM BANK_USER;
SELECT * FROM BANK_ACCOUNTS;
--VIEWS: VIRYTUAL TABLES THAT REPRESENT RESULTS FROM A QUERY
CREATE VIEW ACCOUNT_VIEW AS
SELECT A.A_ID, U.FIRSTNAME, U.LASTNAME, A.BALANCE, A.ACC_TYPE
FROM BANK_ACCOUNTS A
INNER JOIN BANK_USER U
ON A.USER_ID = U.U_ID;

SELECT * FROM ACCOUNT_VIEW;
--DML
INSERT INTO BANK_USER (FIRSTNAME, LASTNAME, USERNAME, PASSWORD)
VALUES ('Jurgen', 'Rengifo', 'jrengifo', 'guinness17');

INSERT INTO BANK_ACCOUNTS (USER_ID, BALANCE, ACC_TYPE)
VALUES (1, 10000, 'CHECKING');
COMMIT;